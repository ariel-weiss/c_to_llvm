%{

#include <utility>
#include <stack>
#include "hw3_output.hpp"
#include "SymbolTable.h"
#include "bp.hpp"
#include "CodeGen.h"

#define BUFFER (CodeBuffer::instance())

using namespace std;
extern int yylineno;
extern int yylex();
void yyerror(const char* c);
void endScope();

TablesStack tables;
CodeGen rgen;

%}

%right ASSIGN
%left OR
%left AND
%left RELOPB
%nonassoc RELOPA
%left BINOPB
%left BINOPA
%right NOT
%left LPAREN
%left RPAREN
%token RBRACE
%token ENUM
%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token TRUE
%token FALSE
%token RETURN
%nonassoc IF
%nonassoc ELSE
%token WHILE
%token CONTINUE
%token COMMA
%token LBRACE
%token ID
%token NUM
%token STRING
%token BREAK
%token SC


%%

Program:	PRE_PROG Enums Funcs {
     tables.CheckForMain();
     //output::endScope();
     endScope();
     BUFFER.printGlobalBuffer();
     BUFFER.printCodeBuffer();
     exit(0);
    ;}
;
PRE_PROG: {
	rgen = CodeGen();
    SymbolTable* table = new SymbolTable();
    Function* print = new Function("print","VOID","STRING");
    Function* printi = new Function("printi","VOID","INT");
    table->insert(print);
    table->insert(printi);
	tables.push(table);

        rgen.pre_prog_rule();

};
Funcs:	/*epsilon*/ {}
		| FuncDecl Funcs {}
;
FuncDecl:	RetType ID LPAREN { tables.pushNewWithOffset(0); }Formals RPAREN {
                tables.verifyVarNotDefined($2->_name,yylineno);
            } LBRACE {

					tables.top()->_retType = $1->_type; //Scope belongs to a function with retType.
					tables.verifyVarNotDefined($2->_name,yylineno);
					Formalslist* fl = dynamic_cast<Formalslist*>($5);
					Function* f = new Function($2->_name,$1->_type,fl->_params);
					tables.insertToSecond(f);

					/* TODO: emit Function code: */
					BUFFER.emit("");
					BUFFER.emit("define "+f->llvmFormat()+"{");
					BUFFER.emit("entry:");
					rgen.emitCommand("%fp = alloca [50 x i32]","Allocate 50 Locals");
					/* TODO: Count the parameters and alloca ptr */
					string argsNum = std::to_string(fl->_params.size());
					if(fl->_params.size() > 0)
					rgen.emitCommand("%args = alloca ["+argsNum+" x i32]","Allocate ["+argsNum+"] Parameters");
					//rgen.emitCommand("%temp = alloca i32","Allocate Temp");
					/* TODO: initialize the argumnets */
					for(int i = 0; i < fl->_params.size(); i++){
						string var = rgen.genFreshVar();
						rgen.initVar(var,(i+1)*(-1),fl->_params.size());
						BUFFER.emit("store i32 %"+std::to_string(i)+" , i32* "+var);
					}
					BUFFER.emit("");
			} Statements RBRACE {
					//BUFFER.emit("ret whatever");
					//BPatch the last statment:
					int addtM = rgen.emitCommand("br label @","[M lbl] , End Function");
					string lbl = BUFFER.genLabel();
					BUFFER.bpatch(BUFFER.makelist({addtM,FIRST}),lbl);
					BUFFER.bpatch($10->_nextlist,lbl); //st.end label
					/* TODO: Check if 'ret void' is emitted! */
					if($1->_type == "VOID") BUFFER.emit("ret void");
					else BUFFER.emit("ret i32 0"); //default return 0
					BUFFER.emit("}");
					//output::endScope();
					endScope();
            }
;

Enums:	/*epsilon*/ {}
		| EnumDecl Enums {}
;
EnumDecl:	ENUM ID {
                tables.verifyVarNotDefined($2->_name,yylineno);
                STEntry* temp = new STEntry($2->_name,$2->_type);
                tables.insertToTop(temp);
            }LBRACE EnumeratorList RBRACE SC {

                EnumeratorList* elst = dynamic_cast<EnumeratorList*>($5);
                EnumType* e = new EnumType($2->_name, elst->_enumerators);
                tables.popFromTop();
                tables.insertToTop(e);
            }
;
RetType:	Type {$$ = $1;}
			| VOID {$$ = new STEntry("n/a","VOID");}
;
Formals:	/*epsilon*/ {$$ = new Formalslist();}
			| FormalsList {
			Formalslist* lst = dynamic_cast<Formalslist*>($1);
			int len = lst->_params.size();
			tables.top()->updateOffsetsRange(len);
			$$ = $1;

			}
;
FormalsList:	FormalDecl {
			Formalslist* fl = new Formalslist();
			STEntry* x = new STEntry($1->_name,$1->_type);
			fl->pushArg(x->_type);
			tables.insertToTop(x); //Offset will be handeled later
			$$ = fl;
			}
			| FormalDecl {
                        STEntry* x = new STEntry($1->_name,$1->_type);
                        tables.insertToTop(x);
                        } COMMA FormalsList {
			Formalslist* fl = dynamic_cast<Formalslist*>($4);
			/* assuming fl isn't NULL */
			fl->pushArg($1->_type);
			$$ = fl;
			}
;
FormalDecl:		 Type ID {
			tables.verifyVarNotDefined($2->_name,yylineno);
			$$ = new STEntry($2->_name,$1->_type);
			}
				| EnumType ID {
			//tables.verifyEnumTypeDef($1->_name,yylineno);
			tables.verifyVarNotDefined($2->_name,yylineno);
			$$ = new STEntry($2->_name,$1->_type);
			}
;
EnumeratorList:		Enumerator { /* Actually gives ID */
				EnumeratorList* el = new EnumeratorList();
				//STEntry* x = new STEntry($1->_name,"n/a");/* =$1 */
				//tables.insertToTop(x); TODO: Might not be cool. need not to print! //
				el->push($1->_name,yylineno);//Push and check if already exists
				$$ = el;
				}
				| EnumeratorList COMMA Enumerator {
				EnumeratorList* el = dynamic_cast<EnumeratorList*>($1);
				/* assuming el isn't NULL */
				//STEntry* x = new STEntry($3->_name,"n/a");/* =$3 */
				el->push($3->_name,yylineno);//Push and check if already exists
				//tables.insertToTop(x);
				$$ = el;
				}
;
Enumerator: 	ID {
					tables.verifyVarNotDefined($1->_name,yylineno);
					$$ = new STEntry($1->_name,"ENUMERATOR");
				}
;
Statements:		Statement {
//                        if(!$1->_is_return_statement){
//                        int addtM = rgen.emitCommand("br label @","[M lbl] , Statement Finishing");
//                        string lbl = BUFFER.genLabel();
//                        BUFFER.bpatch(BUFFER.makelist({addtM,FIRST}),lbl);
//                        BUFFER.bpatch($1->_nextlist,lbl); //st.end label
//
//                        }

						$$->_nextlist = $1->_nextlist;
                        $$->_breaklist = $1->_breaklist;
						$$->_continuelist = $1->_continuelist;
				}
				| Statements M Statement {
						if(!$2->_is_return_statement){
                        //int addt = rgen.emitCommand("br label @","last statement jump");
                        //string lbl = BUFFER.genLabel();
                        //BUFFER.bpatch(BUFFER.makelist({addt,FIRST}),lbl);
                        BUFFER.bpatch($1->_nextlist,$2->_name); //st.end label
                        }
						$$->_nextlist = $3->_nextlist;
						$$->_breaklist = BUFFER.merge($1->_breaklist,$3->_breaklist);
						$$->_continuelist = BUFFER.merge($1->_continuelist,$3->_continuelist);
				}
;
Statement:		LBRACE NEW_SCOPE Statements M END_SCOPE RBRACE {
					$$->_nextlist = $3->_nextlist;
					$$->_breaklist = $3->_breaklist;
					$$->_continuelist = $3->_continuelist;
					BUFFER.bpatch($3->_nextlist,$4->_name);
				}
				| Type ID SC {
						tables.verifyVarNotDefined($2->_name,yylineno);
						STEntry* ste = new STEntry($2->_name,$1->_type);
						tables.insertToTop(ste);

						string vvar = rgen.genFreshVar();
						rgen.initVar(vvar,ste->_offset);//Always will be local here..
						rgen.emitCommand("store i32 0, i32* "+vvar,"Declare ["+$2->_name+"] & set to 0");

				}
				| EnumType ID SC {
						//tables.verifyEnumTypeDef($1->_name,yylineno);
						tables.verifyVarNotDefined($2->_name,yylineno);//Verify enum<id> id isn't defined?
						STEntry* ste = new STEntry($2->_name,$1->_type);
						tables.insertToTop(ste);

						string vvar = rgen.genFreshVar();
						rgen.initVar(vvar,ste->_offset);//Always will be local here..
						rgen.emitCommand("store i32 0, i32* "+vvar,"Declare ["+$2->_name+"] & set to 0");
				}
				| EnumDecl {/* TODO: Handle enums here? */}
				| Type ID ASSIGN Exp SC {
						tables.verifyVarNotDefined($2->_name,yylineno);
						tables.verifyVarDef($4->_name,yylineno,($4->_isFunc || !$4->_isId));
						tables.checkVarsTypes($1->_type,$4->_type,yylineno);
						STEntry* ste = new STEntry($2->_name,$1->_type);
						tables.insertToTop(ste);

						rgen.type_id_asmt($$,$1,$2,$3,$4,ste);

				}
				| EnumType ID ASSIGN Exp SC {

						EnumType* et = dynamic_cast<EnumType*>($1);
						et = tables.getEnumTypeFromTable(et->_name,yylineno);
						tables.verifyVarDef($4->_name,yylineno,($4->_isFunc || !$4->_isId));
						bool isValid = tables.checkEnumeratorAssign(et,$4,$2->_name,yylineno);
						tables.verifyVarNotDefined($2->_name,yylineno);
						//tables.checkVarsTypes($1->_type,$4->_type,yylineno);
						tables.verifyVarYesDefined($4->_name,yylineno);//TODO: NOTE: ONLY ENUMERATORS

						STEntry* ste = new STEntry($2->_name,et->_type);
						if(isValid) ste->_enumVal = $4->_name;
						
						tables.insertToTop(ste);

						rgen.type_id_asmt($$,$1,$2,$3,$4,ste);
                }
				| ID ASSIGN Exp SC {
						tables.verifyItIsVar($1->_name,yylineno);
						tables.checkVarsImplicitTypes($1->_name,$3->_type,yylineno);
						//STEntry* ste = new STEntry($2->_name,$1->_type);
						//tables.insertToTop(ste);
						STEntry* ste = tables.findInTables($1->_name);
						Function* f = tables.getMeMyFunction();
						rgen.id_asmt($$,$1,$2,$3,ste,f);
				}
				| Call SC {$$ = $1; /* Nothing to do here */}
				| RETURN SC {
						tables.checkLastReturn("EMPTY",yylineno);
						BUFFER.emit("ret void");
						$$->_is_return_statement = true;
				}
				| RETURN Exp SC {
						tables.checkLastReturn($2->_type,yylineno);

						rgen.ret_exp($$,$2);
						BUFFER.emit("ret i32 "+$2->_place);
						$$->_nextlist = $2->_nextlist;
						$$->_is_return_statement = true;
                }
				| IF LPAREN VALID_BOOL_EXP RPAREN M STATEMENT_IN_SCOPE  {
						BUFFER.bpatch($3->_truelist,$5->_name);
						$$->_nextlist = BUFFER.merge($3->_falselist, $6->_nextlist);
						$$->_breaklist = $6->_breaklist;
						$$->_continuelist = $6->_continuelist;
						rgen.emitCommand("","END IF");
				}
				| IF LPAREN VALID_BOOL_EXP RPAREN M STATEMENT_IN_SCOPE ELSE N M STATEMENT_IN_SCOPE{
						BUFFER.bpatch($3->_truelist,$5->_name);
						BUFFER.bpatch($3->_falselist,$9->_name);
						$$->_nextlist = BUFFER.merge(BUFFER.merge($6->_nextlist, $8->_nextlist), $10->_nextlist);
						$$->_breaklist = BUFFER.merge($6->_breaklist, $10->_breaklist);
						//rgen.printList($6->_breaklist);rgen.printList($10->_breaklist);
						$$->_continuelist = BUFFER.merge($6->_continuelist, $10->_continuelist);
						rgen.emitCommand("","END IF-ELSE");
				}
				| WHILE M LPAREN VALID_BOOL_EXP RPAREN M STATEMENT_IN_WHILE {
						BUFFER.bpatch($7->_nextlist,$2->_name);
						BUFFER.bpatch($4->_truelist,$6->_name);
						BUFFER.bpatch($7->_continuelist,$2->_name);
						//$$->_nextlist = $4->_falselist;
						$$->_nextlist = BUFFER.merge($4->_falselist, $7->_breaklist);
                        int addt = rgen.emitCommand("br label %"+$2->_name,"LOOP COMMAND");
                        BUFFER.bpatch(BUFFER.makelist({addt,FIRST}),$2->_name);
						rgen.emitCommand("","END WHILE");
				}
				| BREAK SC {
						tables.checkBreak(yylineno);
						$$ = new STEntry();
						int addtb = rgen.emitCommand("br label @","BREAK and jump to next");
						$$->_breaklist = BUFFER.makelist({addtb,FIRST});
				}
				| CONTINUE SC {
						tables.checkContinue(yylineno);

						int addtc = rgen.emitCommand("br label @","CONTINUE.");
						$$->_continuelist = BUFFER.makelist({addtc,FIRST});
				}
;

Call:		ID LPAREN ExpList RPAREN {
				Function* func = tables.getFunctionFromCall($1->_name,yylineno);
				Explist* explst = dynamic_cast<Explist*>($3);
				func->checkArguments(explst,yylineno);
				STEntry* exp = new STEntry($1->_name,func->_type);
				exp->_isFunc=true;
				//$$->_type = func->_type;
				$$ = exp;

				rgen.call($$,func,explst);
				}
			| ID LPAREN RPAREN {
				Function* func = tables.getFunctionFromCall($1->_name,yylineno);
				func->checkArguments(nullptr,yylineno);
				STEntry* exp = new STEntry($1->_name,func->_type);
                exp->_isFunc=true;
				//$$->_type = func->_type;
				$$ = exp;

				rgen.call_noargs($$,func);
				}
;
ExpList:    Exp {
				/* Check if RELOP exp , eval 'place' then push */
				if($1->_type == "BOOL")
					rgen.exp_eval($$,$1);
				/* Now push the expression as usual */
				Explist *explst = new Explist();
				explst->_exps.push_back($1);
				$$ = explst;
				}
			|Exp {if($1->_type == "BOOL") rgen.exp_eval($$,$1);} COMMA ExpList	{
				/* Check if RELOP exp , eval 'place' then push */
				//if($1->_type == "BOOL") rgen.exp_eval($$,$1);
				/* Now push the expression as usual */
				Explist *explst = dynamic_cast<Explist*>($4);
				explst->_exps.push_back($1);
				$$ = explst;
				}
;

Type:		INT {$$ = new Num("INT");}
			| BYTE {$$ = new Num("BYTE");}
			| BOOL {$$ = new Bool();}
;
EnumType:	ENUM ID {
			//TODO: Need to verify enum<id> type exist.
                //tables.verifyVarYesDefined($2->_name,yylineno,Enum);
                tables.verifyEnumTypeDef($2->_name,yylineno);
				$$ = new EnumType($2->_name);
			}
;
Exp:	LPAREN Exp RPAREN {
			$$ = $2;
			//$$->_truelist = $2->_truelist;
			//$$->_falselist = $2->_falselist;
		}
		| Exp BINOPA Exp {
			$$ = new Binop($1,$3,yylineno);
			rgen.binop_rule($$,$1,$2,$3);
		}
		| Exp BINOPB Exp {
			$$ = new Binop($1,$3,yylineno);
            rgen.binop_rule($$,$1,$2,$3);

		}
		| ID {
            tables.verifyVarYesDefined($1->_name,yylineno);
			STEntry* ste = tables.findInTables($1->_name);
			STEntry* exp = new STEntry(ste->_name,ste->_type);
			//Exp* exp = new Exp(ste->_name,ste->_type,"ID");
			exp->_isId=true;
			exp->_enumVal = ste->_enumVal;
			$$ = exp;
			//
			Function* f = tables.getMeMyFunction();
			rgen.id_eval($$,$1,ste,f);
        }
		| Call { $$ = $1; }
		| NUM {
			Num *num = dynamic_cast<Num*>($1);
			$$ = new Num(*num); //INT by default
			$$->_place = num->_sval;
			//$$->_name = num->_sval;
			//emitCommand("store i32 "+num->_sval+" , i32* %temp","Store ["+num->_sval+"] in Temp");
		}
		| NUM B {
			Num *num = dynamic_cast<Num*>($1);
			if(num->_val > 255){
				output::errorByteTooLarge(yylineno, num->_sval);
				exit(0);
			}
			num->_type = "BYTE"; //INT by default
			$$ = new Num(*num);
			$$->_place = num->_sval;
			//
			//emitCommand("store i32 "+num->_sval+" , i32* %temp","Store ["+num->_sval+" b] in Temp");
		}
		| STRING {  $1->_name = $1->_name.substr(1,$1->_name.length()-2);
					$$ = $1; /* Idea - save the place on GlobalBuff in _place */
					string newStr = rgen.genFreshString();
					string str = $$->_name;
					string len = std::to_string(str.length()+1);
					BUFFER.emitGlobal(newStr+" = constant ["+len+" x i8] c\""+str+"\\00\"");
					$$->_place = newStr;
				}
		| TRUE {
					$$ = $1;
					//emitCommand("store i32 1 , i32* %temp","Store [TRUE] in Temp");
					$$->_truelist = BUFFER.makelist({BUFFER.emit("br label @"),FIRST});
					rgen.emitCommand("","TRUE");
					$$->_place = "1";
				}
		| FALSE {
					$$ = $1;
					//emitCommand("store i32 0 , i32* %temp","Store [FALSE] in Temp");
					$$->_falselist = BUFFER.makelist({BUFFER.emit("br label @"),FIRST});
					rgen.emitCommand("","FALSE");
                    $$->_place = "0";
				}
		| NOT Exp {
					$$ = new Not($2,yylineno);
                	$$->_truelist = $2->_falselist;
                	$$->_falselist = $2->_truelist;
					//emitCommand("store i32 1 , i32* %temp","Store [Not?] in Temp");
					//string tempv = rgen.genFreshVar();
					//rgen.emitCommand(tempv+" = xor i32 1, "+$2->_place,"make logic NOT");
					//$$->_place = tempv;
        }
		| Exp AND M Exp {
			$$ = new LogicOp($1,$4,yylineno);
			/* TODO: bp the crap outta this */
			rgen.and_rule($$,$1,$2,$3,$4);
		}
		| Exp OR M Exp {
			$$ = new LogicOp($1,$4,yylineno);
			/* TODO: bp the crap outta this */
			rgen.or_rule($$,$1,$2,$3,$4);
		}
		| Exp RELOPA Exp {
			$$ = new Relop($1,$3,yylineno);
			rgen.relop_rule($$,$1,$2,$3);
		}
		| Exp RELOPB Exp {
			$$ = new Relop($1,$3,yylineno);
			rgen.relop_rule($$,$1,$2,$3);
		}
		| LPAREN Type RPAREN Exp {
			tables.checkVarsTypes("INT",$2->_type,yylineno);
			tables.checkVarsTypes("ENUM_TYPE",$4->_type,yylineno);
			$$ = new STEntry($4->_name,"INT");
			/* TODO: Implement the conversion, smooth and cool */
			$$->_place = $4->_place;

		}
;


/* Markers for If/While statements */

VALID_BOOL_EXP: Exp  {
	if($1->_type != "BOOL"){
	output::errorMismatch(yylineno);
	exit(0);
	}
	$$ = $1;
};
STATEMENT_IN_SCOPE: NEW_SCOPE Statement END_SCOPE{
	$$ = new STEntry();
    $$->_nextlist = $2->_nextlist;
    $$->_breaklist = $2->_breaklist;
    $$->_continuelist = $2->_continuelist;
    $$->_truelist = $2->_truelist;
    $$->_falselist = $2->_falselist;

}
STATEMENT_IN_WHILE: NEW_SCOPE {tables.enterWhile();} Statement {tables.exitWhile();} END_SCOPE{
	$$ = $3;
	$$->_nextlist = $3->_nextlist;
    $$->_breaklist = $3->_breaklist;
    $$->_continuelist = $3->_continuelist;
}
;
NEW_SCOPE: {
tables.pushNew();
};
END_SCOPE: {
//output::endScope();
endScope();
};

/*    Markers For The Code Generation    */
M: {
	int addtM = rgen.emitCommand("br label @","[M lbl] , Statement Begin");
	string lbl = BUFFER.genLabel();
	BUFFER.bpatch(BUFFER.makelist({addtM,FIRST}),lbl);
	$$ = new STEntry(lbl);
};
N: {
	int addtN = rgen.emitCommand("br label @","[N lbl] , Else Statment");
	string lbl = BUFFER.genLabel();
	BUFFER.bpatch(BUFFER.makelist({addtN,FIRST}),lbl);
	$$ = new STEntry(lbl);
	$$->_nextlist = BUFFER.makelist({BUFFER.emit("br label @"),FIRST});
};
%%

int main()
{

    return yyparse();
}

void yyerror(const char* c) {
	output::errorSyn(yylineno);
	exit(0);
}

void endScope(){
	//tables.printCurrentTabel();

	tables.pop();
}